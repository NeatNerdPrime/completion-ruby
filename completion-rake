#! bash
# This file is not meant to be executed on its own; the line above is merely
# a hint for text editors
__rake()
{
  local cmd="$1"
  # $2 returns just the part after the last colon
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="$3"
  COMPREPLY=()

  case "$prev" in
    -f | --rakefile | -r | --require)
      # leave COMPREPLY blank, let the default handle it
      return;;
    -I | --libdir | -R | --rakelibdir)
      # compgen -o dirnames isn't very good, so leave it at default too
      return;;
    *)
      if [[ $cur == -* ]]; then
        local options="
          -C --classic-namespace -D --describe -n --dry-run -h --help
          -I --libdir -N --nosearch -P --prereqs -q --quiet -f --rakefile
          -R --rakelibdir -r --require -s --silent -T --tasks -t --trace
          -v --verbose -V --version"
        COMPREPLY=($(compgen -W "$options" -- "$cur"))
      else
        local rakefile="$(__rake_get_rakefile)"
        COMPREPLY=($(compgen -W "$(__rake_tasks)" -- "$cur"))
      fi
  esac

  if [[ $2 != $cur ]]; then
    # remove prefix
    local prefix="${cur:0:$((${#cur} - ${#2}))}"
    COMPREPLY=(${COMPREPLY[@]/#$prefix/})
  fi
}

__rake_get_rakefile()
{
  local i
  for (( i=0; i<=$COMP_CWORD-1; ++i )); do
    arg="${COMP_WORDS[$i]}"

    case $arg in
      --rakefile | -f)
        echo "${COMP_WORDS[$(($i + 1))]}"
        return;;
      --rakefile=* | -f=*)
        echo "${arg#*=}"
        return;;
    esac
  done

  local fn
  for fn in rakefile Rakefile; do
    if [[ -f $fn ]]; then
      echo "$fn"
      return
    fi
  done

  return 1
}

__rake_tasks()
{
  local rakefile="${1:-$rakefile}"
  [[ -f $rakefile ]] || return 1
  rakefile="$(readlink -f "$rakefile")"

  local cachefile="$HOME/.local/rake-completion-cache"
  local tasks
  if [[ $cachefile -nt $rakefile &&
        $(head -n 1 -- "$cachefile") == $rakefile ]]; then
    tasks="$(tail -n +2 -- "$cachefile")"
  else
    tasks="$(rake --rakefile "$rakefile" --silent --tasks 2>/dev/null | ruby -ne '~/^rake ([\w:]+)/ and puts $1')"
    (echo "$rakefile"$'\n'"$tasks" >"$cachefile") 2>/dev/null
  fi

  echo $tasks
}

complete -F __rake -o default rake
