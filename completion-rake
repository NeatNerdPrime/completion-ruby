# bash completion for the `rake` command.
#
# Copyright (c) 2008 Daniel Luz <dev at mernen dot com>.
# Distributed under the MIT license.
# http://mernen.com/projects/completion-ruby
#
# To use, source this file on bash:
#   . completion-rake

__rake()
{
  local cmd="$1"
  # $2 returns just the part after the last colon
  local cur="${COMP_WORDS[$COMP_CWORD]}"
  local prev="$3"
  COMPREPLY=()

  case "$prev" in
    -f | --rakefile | -r | --require)
      # leave COMPREPLY blank, let the default handle it
      return;;
    -I | --libdir | -R | --rakelibdir)
      # compgen -o dirnames isn't very good, so leave it at default too
      return;;
    *)
      if [[ "$cur" == -* ]]; then
        local options="
          -C --classic-namespace -D --describe -n --dry-run -h --help
          -I --libdir -N --nosearch -P --prereqs -q --quiet -f --rakefile
          -R --rakelibdir -r --require -s --silent -T --tasks -t --trace
          -v --verbose -V --version"
        COMPREPLY=($(compgen -W "$options" -- "$cur"))
      else
        local rakefile rakedir
        __rake_get_rakefile || return
        COMPREPLY=($(compgen -W "$(__rake_tasks)" -- "$cur"))
      fi
  esac

  if [[ "$cur" == *:* ]]; then
    # remove prefix
    local prefix="${cur%:*}:"
    COMPREPLY=("${COMPREPLY[@]#"$prefix"}")
  fi
}

# Finds the appropriate rakefile, given the arguments in the command-line and
# the current directory.
#
# Writes to `$rakefile` the path of the file, and sets `$rakedir` if the
# command must be run from a different directory.
#
# Since this function sets new variables, it must NOT run on a subshell.
#
# Note that `$rakefile` is also NOT guaranteed to be absolute!
__rake_get_rakefile()
{
  # look for --rakefile or -f
  # $rakedir is not defined in this case, regardless of where $rakefile lives
  local i
  for ((i=0; i <= $COMP_CWORD - 1; ++i)); do
    arg="${COMP_WORDS[$i]}"

    case "$arg" in
      --rakefile | -f)
        rakefile="${COMP_WORDS[$(($i + 1))]}"
        return;;
      --rakefile=* | -f=*)
        rakefile="${arg#*=}"
        return;;
    esac
  done

  # look for rakefiles in the directory hierarchy
  # note that the command should run on the context of the directory where
  # the rakefile is found, so $rakedir is set
  local fn
  pushd . >/dev/null
  while true; do
    for fn in rakefile Rakefile; do
      if [[ -f "$fn" ]]; then
        rakedir="$(pwd)"
        rakefile="$rakedir/$fn"
        popd >/dev/null
        return
      fi
    done
    cd ..
    [[ "$(pwd)" == "/" ]] && break
  done

  popd >/dev/null
  return 1
}

# Outputs the list of possible tasks for the given rakefile and rakedir,
# one task per line.
#
# Parameters can be passed either as environment variables `$rakefile` and
# `$rakedir` or via positional arguments:
#     __rake_tasks <rakefile> [rakedir]
__rake_tasks()
{
  local rakefile="${1:-$rakefile}"
  local rakedir="${2:-$rakedir}"
  [[ -f "$rakefile" ]] || return 1
  rakefile="$(readlink -f -- "$rakefile")"

  local cachedir="$HOME/.local"
  local cachefile="$cachedir/rake-completion-cache"
  # uncomment the following lines if you prefer individual caches:
##  local cachedir="$HOME/.local/rake-completion-cache"
##  local cachefile="$cachedir/${rakefile//\//%}"

  local tasks
  if [[ "$cachefile" -nt "$rakefile" &&
        "$(head -n 1 -- "$cachefile")" == "$rakefile" ]]; then
    tail -n +2 -- "$cachefile"
  else
    [[ -d "$rakedir" ]] && cd "$rakedir"
    tasks="$(rake --rakefile "$rakefile" --silent --tasks 2>/dev/null |
             awk '/^rake / { print $2 }')"
    if [[ "$tasks" ]]; then
      # attempt to ensure $cachedir exists and is a directory
      # before writing to $cachefile
      ([[ -f "$cachedir" ]] && rm -- "$cachedir";
       mkdir --parents -- "$cachedir" &&
       echo "$rakefile"$'\n'"$tasks" >"$cachefile") 2>/dev/null
      echo "$tasks"
    fi
  fi
}

complete -F __rake -o default rake
# vim: ai ft=sh sw=2 sts=2 et
