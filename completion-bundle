#! bash
# bash completion for the `bundle` command.
#
# Copyright (c) 2011-2017 Daniel Luz <dev at mernen dot com>.
# Distributed under the MIT license.
# http://mernen.com/projects/completion-ruby
#
# To use, source this file on bash:
#   . completion-bundle

__bundle() {
    local cur=$2
    local prev=$3
    local bundle_command
    local bundle_command_index
    __bundle_get_command
    COMPREPLY=()

    local options
    if [[ $cur = -* && $bundle_command != exec ]]; then
        options="-V --no-color --no-no-color --verbose --no-verbose"
        case $bundle_command in
        "")
            options="$options --version --help";;
        check)
            options="$options --dry-run --gemfile --path -r --retry";;
        clean)
            options="$options --dry-run --force";;
        config)
            options="$options --local --global --delete";;
        doctor)
            options="$options --gemfile --quiet --no-quiet";;
        gem)
            options="$options -b -e -t --bin --coc --no-coc --edit --exe
                     --no-exe --ext --no-ext --mit --no-mit --test";;
        init)
            options="$options --gemspec";;
        install)
            options="$options --binstubs --clean --deployment --force --frozen
                     --full-index --gemfile --jobs --local --no-cache
                     --no-prune --path --quiet --retry --shebang --standalone
                     --system --trust-policy --with --without";;
        lock)
            options="$options --add-platform --conservative --full-index
                     --local --lockfile --major --minor --patch --print
                     --remove-platform --strict --update";;
        platform)
            options="$options --ruby";;
        show)
            options="$options --outdated --paths --no-paths";;
        update)
            options="$options --bundler --conservative --force --full-index
                     --group --jobs --local --major --minor --patch --quiet
                     --ruby --source --strict";;
        viz)
            options="$options -f -F -R -v -W --file --format --requirements
                     --no-requirements --version --no-version --without";;
        esac
    else
        case $bundle_command in
        "" | help)
            options="help install update package exec config
                     check show outdated console open lock viz init gem
                     platform clean doctor"
            ;;
        check | install)
            case $prev in
            --binstubs | --path)
                _filedir -d
                return;;
            --standalone | --with | --without)
                options="$(__bundle_get_available_groups)";;
            --trust-policy)
                options="HighSecurity MediumSecurity LowSecurity
                         AlmostNoSecurity NoSecurity";;
            esac
            ;;
        config)
            case $prev in
            local.*)
                _filedir -d
                return;;
            esac
            ;;
        exec)
            if [[ $COMP_CWORD -eq $bundle_command_index ]]; then
                # Figure out Bundler's binaries dir
                local bundler_bin=$(bundle exec ruby -e 'puts Bundler.bundle_path + "bin"' 2>/dev/null)
                if [[ -d $bundler_bin ]]; then
                    local binaries=("$bundler_bin"/*)
                    # If there are binaries, strip directory name and use them
                    [[ -f "$binaries" ]] && options="${binaries[@]##*/}"
                else
                    # No binaries found; use full command completion
                    COMPREPLY=($(compgen -c -- "$cur"))
                    return
                fi
            else
                _command_offset $bundle_command_index
                return
            fi
            ;;
        gem)
            case $prev in
            -e | --edit)
                COMPREPLY=($(compgen -c -- "$cur"))
                return;;
            -t | --test)
                options="minitest rspec";;
            esac
            ;;
        update)
            case $prev in
            --group)
                options="$(__bundle_get_available_groups)";;
            esac
            ;;
        viz)
            case $prev in
            -F | --format)
                options="dot jpg png svg";;
            -W | --without)
                options="$(__bundle_get_available_groups)";;
            esac
            ;;
        esac
    fi
    COMPREPLY=($(compgen -W "$options" -- "$cur"))
}

__bundle_get_command() {
    local i
    for ((i=1; i < $COMP_CWORD; ++i)); do
        local arg=${COMP_WORDS[$i]}

        case $arg in
        [^-]*)
            bundle_command=$arg
            bundle_command_index=$((i + 1))
            return;;
        --version)
            # Command-killer
            bundle_command=-
            return;;
        --help)
            bundle_command=help
            bundle_command_index=$((i + 1))
            return;;
        esac
    done
}

# Lists all available groups in the current bundler setup.
__bundle_get_available_groups() {
    bundle exec ruby -e 'puts Bundler.definition.dependencies.map(&:groups).reduce(:|)' 2>/dev/null
}


complete -F __bundle -o bashdefault -o default bundle
# vim: ai ft=sh sw=4 sts=4 et
